--- websocketpp-0.8.1/SConstruct.orig	2019-07-27 08:46:48.227994968 +0000
+++ websocketpp-0.8.1/SConstruct	2019-07-27 08:47:33.128590838 +0000
@@ -1,18 +1,18 @@
-import os, sys, commands
+import os, sys, subprocess
 env = Environment(ENV = os.environ)

 # figure out a better way to configure this
-if os.environ.has_key('CXX'):
+if os.environ.get('CXX'):
     env['CXX'] = os.environ['CXX']

-if os.environ.has_key('DEBUG'):
+if os.environ.get('DEBUG'):
     env['DEBUG'] = os.environ['DEBUG']

-if os.environ.has_key('CXXFLAGS'):
+if os.environ.get('CXXFLAGS'):
     #env['CXXFLAGS'] = os.environ['CXXFLAGS']
     env.Append(CXXFLAGS = os.environ['CXXFLAGS'])

-if os.environ.has_key('LINKFLAGS'):
+if os.environ.get('LINKFLAGS'):
     #env['LDFLAGS'] = os.environ['LDFLAGS']
     env.Append(LINKFLAGS = os.environ['LINKFLAGS'])

@@ -22,24 +22,24 @@
 ## or set BOOST_INCLUDES and BOOST_LIBS if Boost comes with your OS distro e.g. and
 ## needs BOOST_INCLUDES=/usr/include/boost and BOOST_LIBS=/usr/lib like Ubuntu.
 ##
-if os.environ.has_key('BOOSTROOT'):
+if os.environ.get('BOOSTROOT'):
     os.environ['BOOST_ROOT'] = os.environ['BOOSTROOT']

-if os.environ.has_key('BOOST_ROOT'):
+if os.environ.get('BOOST_ROOT'):
    env['BOOST_INCLUDES'] = os.environ['BOOST_ROOT']
    env['BOOST_LIBS'] = os.path.join(os.environ['BOOST_ROOT'], 'stage', 'lib')
-elif os.environ.has_key('BOOST_INCLUDES') and os.environ.has_key('BOOST_LIBS'):
+elif os.environ.get('BOOST_INCLUDES') and os.environ.get('BOOST_LIBS'):
    env['BOOST_INCLUDES'] = os.environ['BOOST_INCLUDES']
    env['BOOST_LIBS'] = os.environ['BOOST_LIBS']
 else:
-   raise SCons.Errors.UserError, "Neither BOOST_ROOT, nor BOOST_INCLUDES + BOOST_LIBS was set!"
+   raise SCons.Errors.UserError("Neither BOOST_ROOT, nor BOOST_INCLUDES + BOOST_LIBS was set!")

 ## Custom OpenSSL
-if os.environ.has_key('OPENSSL_PATH'):
+if os.environ.get('OPENSSL_PATH'):
    env.Append(CPPPATH = os.path.join(os.environ['OPENSSL_PATH'], 'include'))
    env.Append(LIBPATH = os.environ['OPENSSL_PATH'])

-if os.environ.has_key('WSPP_ENABLE_CPP11'):
+if os.environ.get('WSPP_ENABLE_CPP11'):
    env['WSPP_ENABLE_CPP11'] = True
 else:
    env['WSPP_ENABLE_CPP11'] = False
@@ -84,7 +84,7 @@
    env.Append(CCFLAGS = ['-Wall'])
    #env['LINKFLAGS'] = ''
 elif env['PLATFORM'] == 'darwin':
-   if not os.environ.has_key('CXX'):
+   if not os.environ.get('CXX'):
       env['CXX'] = "clang++"
    if env.has_key('DEBUG'):
       env.Append(CCFLAGS = ['-g', '-O0'])
@@ -157,15 +157,15 @@

 if env_cpp11['CXX'].startswith('g++'):
    # TODO: check g++ version
-   GCC_VERSION = commands.getoutput(env_cpp11['CXX'] + ' -dumpversion')
+   GCC_VERSION = subprocess.getoutput(env_cpp11['CXX'] + ' -dumpversion')

    if GCC_VERSION > "4.4.0":
-      print "C++11 build environment partially enabled"
+      print ("C++11 build environment partially enabled")
       env_cpp11.Append(WSPP_CPP11_ENABLED = "true",CXXFLAGS = ['-std=c++0x'],TOOLSET = ['g++'],CPPDEFINES = ['_WEBSOCKETPP_CPP11_STL_'])
    else:
-      print "C++11 build environment is not supported on this version of G++"
+      print ("C++11 build environment is not supported on this version of G++")
 elif env_cpp11['CXX'].startswith('clang++'):
-   print "C++11 build environment enabled"
+   print ("C++11 build environment enabled")
    env.Append(CXXFLANGS = ['-stdlib=libc++'],LINKFLAGS=['-stdlib=libc++'])
    env_cpp11.Append(WSPP_CPP11_ENABLED = "true",CXXFLAGS = ['-std=c++0x','-stdlib=libc++'],LINKFLAGS = ['-stdlib=libc++'],TOOLSET = ['clang++'],CPPDEFINES = ['_WEBSOCKETPP_CPP11_STL_'])
 
@@ -172,14 +172,14 @@
    # look for optional second boostroot compiled with clang's libc++ STL library
    # this prevents warnings/errors when linking code built with two different
    # incompatible STL libraries.
-   if os.environ.has_key('BOOST_ROOT_CPP11'):
+   if os.environ.get('BOOST_ROOT_CPP11'):
       env_cpp11['BOOST_INCLUDES'] = os.environ['BOOST_ROOT_CPP11']
       env_cpp11['BOOST_LIBS'] = os.path.join(os.environ['BOOST_ROOT_CPP11'], 'stage', 'lib')
-   elif os.environ.has_key('BOOST_INCLUDES_CPP11') and os.environ.has_key('BOOST_LIBS_CPP11'):
+   elif os.environ.get('BOOST_INCLUDES_CPP11') and os.environ.get('BOOST_LIBS_CPP11'):
       env_cpp11['BOOST_INCLUDES'] = os.environ['BOOST_INCLUDES_CPP11']
       env_cpp11['BOOST_LIBS'] = os.environ['BOOST_LIBS_CPP11']
 else:
-   print "C++11 build environment disabled"
+   print ("C++11 build environment disabled")
 
 # if the build system is known to allow the isystem modifier for library include
 # values then use it for the boost libraries. Otherwise just add them to the
